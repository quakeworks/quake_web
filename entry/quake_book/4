{"title":"Development","created_date":1639164089,"updated_date":1639164089,"order":"","author":"","id":4,"content":"\n\n## Quake Markdown: QuakeDown 处理逻辑\n\n1. 通过 marked.js 解析 markdown，获得 `block` 级别的 token\n2. 遍历 token 构造不同类型（如 heading、code、list 等），生成新的 markdown 渲染数据。\n3. 遍历 markdownData，根据不同的条件渲染出 `block` 级别的 HTML，重写部分 `inline` 级别的 markdown。\n4. 分别为 `inline` 绑定事件。\n\n相关代码：\n\n- `extensions.ts` 相关扩展的声明代码。\n- `quake-down.ts` 重新生成 markdown 数据。\n- `quake-render.ts` 渲染页面。\n\n## 添加新的 markdown 语法\n\n1. 在 quake-render/src/utils/quake-down.ts 的 `quake-down.ts` 在 `extensions()` 方法中添加新的匹配规则。如：\n\n```javascript\nconst admonition = {\n  name: 'admonition',\n  level: 'block',  // marked.js 支持 `block` 和 `inline` 两种类型\n  start(src) {\n    return src.match(/!!!/)?.index;\n  },\n  tokenizer(src) {\n    const rule = /^!!! ([\\w\\-]+)(?: \"([^\\n]*?)\")?(?:\\s*\\n|\\s*$)((?:(?:\\t| {4})[^\\n]+(?:\\n|$)|\\s*(\\n|$))*)?/;\n    const match = rule.exec(src);\n    if (match) {\n      return {\n        type: 'admonition',\n        raw: match[0],\n        display_type: match[1]?.trim(),\n        title: match[2]?.trim(),\n        body: match[3]?.trim(),\n      };\n    }\n  },\n  renderer(token) {\n    return `<a>${token}</a>`;\n  },\n};\n```\n\n2. 在 `handleCustomBlock` 添加新类型的自定义数据。\n\n3. 根据定义的是 `block`（块）或者 `inline`（内联）属性，来决定渲染方式。\n   - `block` 需要在 `quake-render.tsx` 在 `conditionRender` 方法中添加渲染方式。\n   - `inline` 类型需要在：`quake-render.tsx` 在 `parseInline` 方法中添加渲染方式。\n\n\n\n","type":"quake_book"}