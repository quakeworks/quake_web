{"title":"filter for parse item","author":"","status":"Spike","priority":"Low","created_date":1639042348,"updated_date":1639042348,"id":22,"content":"\n\n## MeiliSearch Query Parser\n\nMeiliSearch Core: [https://github.com/meilisearch/milli](https://github.com/meilisearch/milli)\n\na concurrent indexer combined with fast and relevant search algorithms\n\nBNF:\n\n```text\nfilter         = expression ~ EOF\nexpression     = or\nor             = and (~ \"OR\" ~ and)\nand            = not (~ \"AND\" not)*\nnot            = (\"NOT\" ~ not) | primary\nprimary        = (WS* ~ \"(\"  expression \")\" ~ WS*) | geoRadius | condition | to\ncondition      = value (\"==\" | \">\" ...) value\nto             = value value TO value\nvalue          = WS* ~ ( word | singleQuoted | doubleQuoted) ~ WS*\nsingleQuoted   = \"'\" .* all but quotes \"'\"\ndoubleQuoted   = \"\\\"\" .* all but double quotes \"\\\"\"\nword           = (alphanumeric | _ | - | .)+\ngeoRadius      = WS* ~ \"_geoRadius(\" ~ WS* ~ float ~ WS* ~ \",\" ~ WS* ~ float ~ WS* ~ \",\" float ~ WS* ~ \")\"\n```\n\n## Elasticsearch Range Query\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html\n\n\n```json\n{\n  \"query\": {\n    \"range\": {\n      \"age\": {\n        \"gte\": 10,\n        \"lte\": 20,\n        \"boost\": 2.0\n      }\n    }\n  }\n}\n```\n\n## Elasticsearch DSL\n\n[https://github.com/cch123/elastic-rs](https://github.com/cch123/elastic-rs)\n\nGrammer\n\n```\nbool_expr = { SOI ~ expr ~ EOI }\n\nexpr = {\n    (paren_bool | comp_expr) ~ ( (and_op|or_op)~ (paren_bool| comp_expr))*\n}\n\nand_op = { \"and\" }\nor_op = { \"or\" }\n\nparen_bool = { \"(\" ~ expr ~  \")\" }\n\ncomp_expr = { field ~ op ~ value }\n\nfield = @{ (ASCII_ALPHA ~ ASCII_ALPHANUMERIC*) }\nop = { eq | neq | op_in | op_not_in | gt | gte | lt | lte | like | not_like }\neq = { \"=\" }\nneq = { \"!=\" | \"<>\"}\nop_in = { \"in\" }\nop_not_in= { \"not\" ~ \"in\"}\ngt = { \">\" }\ngte = { \">=\" }\nlt = { \"<\" }\nlte = { \"<=\" }\nlike = { \"like\" }\nnot_like = { \"not\" ~ \"like\" }\n\nvalue = {\n    string_literal\n    | num_literal\n    | \"(\" ~ string_literal ~(\",\" ~ string_literal)* ~ \")\"\n    | \"(\" ~ num_literal ~(\",\" ~ num_literal)* ~ \")\"\n}\n\nnum_literal = @{\n    \"-\"?\n    ~ (\"0\" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)\n    ~ (\".\" ~ ASCII_DIGIT*)?\n    ~ (^\"e\" ~ (\"+\" | \"-\")? ~ ASCII_DIGIT+)?\n}\n\nstring_literal = ${ \"\\\"\" ~ string ~ \"\\\"\" }\nstring = @{ char* }\nchar = {\n    !(\"\\\"\" | \"\\\\\") ~ ANY\n    | \"\\\\\" ~ (\"\\\"\" | \"\\\\\" | \"/\" | \"b\" | \"f\" | \"n\" | \"r\" | \"t\")\n    | \"\\\\\" ~ (\"u\" ~ ASCII_HEX_DIGIT{4})\n}\n\nWHITESPACE = _{ \" \" | \"\\n\" | \"\\r\" }\n```\n\n## Human language\n\nCommons Range\n\n```bash\nnow\ntoday\ntomorrow\nyesterday\nlast/this/next week\nlast/this/next month\nlast/this/next year\n```\n\nRange\n\n```\n2011\n2011-03\n2011-03-04\n\n2011-03-04 04\n```\n\nAtlas Sample:\n\n- https://atlas.apache.org/#/SearchAdvance\n\nAntlr DSL: [AtlasDSLParser.g4](https://github.com/apache/atlas/blob/master/repository/src/main/java/org/apache/atlas/query/antlr4/AtlasDSLParser.g4)\n\n```sql\nfrom Table select owner as Owner, name as Name, qualifiedName as FullName\n```\n","type":"story"}